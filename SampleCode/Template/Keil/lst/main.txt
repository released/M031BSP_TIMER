; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;126    
;;;127    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  4c1a              LDR      r4,|L1.112|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L1.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L1.10|
;;;128    {
;;;129        /* Unlock protected registers */
;;;130        SYS_UnlockReg();
;;;131    
;;;132        /* Enable HIRC clock (Internal RC 48MHz) */
;;;133        CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;134    //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;135    	
;;;136        /* Wait for HIRC clock ready */
;;;137        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;138    //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;139    	
;;;140        /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;141        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;142    
;;;143        /* Enable UART0 clock */
;;;144        CLK_EnableModuleClock(UART0_MODULE);
00002a  4d12              LDR      r5,|L1.116|
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       CLK_EnableModuleClock
;;;145        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_PCLK0, CLK_CLKDIV0_UART0(1));
000032  2101              MOVS     r1,#1
000034  2200              MOVS     r2,#0
000036  0689              LSLS     r1,r1,#26
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_SetModuleClock
;;;146    	
;;;147        CLK_EnableModuleClock(TMR1_MODULE);
00003e  4d0e              LDR      r5,|L1.120|
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;148        CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1SEL_PCLK0, 0);
000046  2101              MOVS     r1,#1
000048  2200              MOVS     r2,#0
00004a  0349              LSLS     r1,r1,#13
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       CLK_SetModuleClock
;;;149    //    CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1SEL_HIRC, 0);
;;;150    	
;;;151        /* Update System Core Clock */
;;;152        SystemCoreClockUpdate();
000052  f7fffffe          BL       SystemCoreClockUpdate
;;;153    
;;;154        /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;155        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk))    |       \
000056  2001              MOVS     r0,#1
000058  0780              LSLS     r0,r0,#30
00005a  6bc1              LDR      r1,[r0,#0x3c]
00005c  22ff              MOVS     r2,#0xff
00005e  0412              LSLS     r2,r2,#16
000060  4391              BICS     r1,r1,r2
000062  2233              MOVS     r2,#0x33
000064  0452              LSLS     r2,r2,#17
000066  1889              ADDS     r1,r1,r2
000068  63c1              STR      r1,[r0,#0x3c]
00006a  2000              MOVS     r0,#0
00006c  6020              STR      r0,[r4,#0]
;;;156                        (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;157    
;;;158        /* Lock protected registers */
;;;159        SYS_LockReg();
;;;160    }
00006e  bd70              POP      {r4-r6,pc}
;;;161    
                          ENDP

                  |L1.112|
                          DCD      0x40000100
                  |L1.116|
                          DCD      0x5f803d10
                  |L1.120|
                          DCD      0x5ec00003

                          AREA ||i.TIMER1_Init||, CODE, READONLY, ALIGN=2

                  TIMER1_Init PROC
;;;118    
;;;119    void TIMER1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;120    {
;;;121        TIMER_Open(TIMER1, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L2.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1508              ASRS     r0,r1,#20
00001c  4904              LDR      r1,|L2.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;122        TIMER_EnableInt(TIMER1);
;;;123        NVIC_EnableIRQ(TMR1_IRQn);	
;;;124        TIMER_Start(TIMER1);
;;;125    }
000028  bd10              POP      {r4,pc}
;;;126    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      0x40050020
                  |L2.48|
                          DCD      0xe000e100

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  TMR1_IRQHandler PROC
;;;99     
;;;100    void TMR1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
000002  480e              LDR      r0,|L3.60|
000004  6881              LDR      r1,[r0,#8]
000006  07c9              LSLS     r1,r1,#31
000008  0fc9              LSRS     r1,r1,#31
;;;101    {
00000a  d016              BEQ      |L3.58|
00000c  2401              MOVS     r4,#1
00000e  6084              STR      r4,[r0,#8]
;;;102    	static uint32_t LOG = 0;
;;;103    	static uint16_t CNT = 0;
;;;104    	
;;;105        if(TIMER_GetIntFlag(TIMER1) == 1)
;;;106        {
;;;107            TIMER_ClearIntFlag(TIMER1);
;;;108    
;;;109    		if (CNT++ >= 1000)
000010  490b              LDR      r1,|L3.64|
000012  8808              LDRH     r0,[r1,#0]  ; CNT
000014  1c42              ADDS     r2,r0,#1
000016  800a              STRH     r2,[r1,#0]
000018  227d              MOVS     r2,#0x7d
00001a  00d2              LSLS     r2,r2,#3
00001c  4290              CMP      r0,r2
00001e  d30c              BCC      |L3.58|
;;;110    		{		
;;;111    			CNT = 0;
000020  2000              MOVS     r0,#0
000022  8008              STRH     r0,[r1,#0]
;;;112            	printf("%s : %4d\r\n",__FUNCTION__,LOG++);
000024  684a              LDR      r2,[r1,#4]  ; LOG
000026  1c50              ADDS     r0,r2,#1
000028  6048              STR      r0,[r1,#4]  ; LOG
00002a  4906              LDR      r1,|L3.68|
00002c  a006              ADR      r0,|L3.72|
00002e  f7fffffe          BL       __2printf
;;;113    			PB14 ^= 1;	
000032  4908              LDR      r1,|L3.84|
000034  6b88              LDR      r0,[r1,#0x38]
000036  4060              EORS     r0,r0,r4
000038  6388              STR      r0,[r1,#0x38]
                  |L3.58|
;;;114    
;;;115    		}		
;;;116        }
;;;117    }
00003a  bd10              POP      {r4,pc}
;;;118    
                          ENDP

                  |L3.60|
                          DCD      0x40050020
                  |L3.64|
                          DCD      ||area_number.12||
                  |L3.68|
                          DCD      ||.constdata||
                  |L3.72|
000048  2573203a          DCB      "%s : %4d\r\n",0
00004c  20253464
000050  0d0a00  
000053  00                DCB      0
                  |L3.84|
                          DCD      0x40004840

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;58     
;;;59     void UART02_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;60     {
;;;61         if(UART_GET_INT_FLAG(UART0, UART_INTSTS_RDAINT_Msk | UART_INTSTS_RXTOINT_Msk))     /* UART receive data available flag */
000002  4c0b              LDR      r4,|L4.48|
000004  69e0              LDR      r0,[r4,#0x1c]
000006  2111              MOVS     r1,#0x11
000008  0209              LSLS     r1,r1,#8
00000a  4208              TST      r0,r1
00000c  d102              BNE      |L4.20|
00000e  e004              B        |L4.26|
                  |L4.16|
;;;62         {
;;;63             while(UART_GET_RX_EMPTY(UART0) == 0)
;;;64             {
;;;65                 UARTx_Process();
000010  f7fffffe          BL       UARTx_Process
                  |L4.20|
000014  69a1              LDR      r1,[r4,#0x18]         ;63
000016  0449              LSLS     r1,r1,#17             ;63
000018  d5fa              BPL      |L4.16|
                  |L4.26|
;;;66             }
;;;67         }
;;;68     
;;;69         if(UART0->FIFOSTS & (UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk | UART_FIFOSTS_RXOVIF_Msk))
00001a  69a1              LDR      r1,[r4,#0x18]
00001c  4620              MOV      r0,r4
00001e  2271              MOVS     r2,#0x71
000020  4211              TST      r1,r2
000022  d003              BEQ      |L4.44|
;;;70         {
;;;71             UART_ClearIntFlag(UART0, (UART_INTSTS_RLSINT_Msk| UART_INTSTS_BUFERRINT_Msk));
000024  2109              MOVS     r1,#9
000026  0289              LSLS     r1,r1,#10
000028  f7fffffe          BL       UART_ClearIntFlag
                  |L4.44|
;;;72         }
;;;73     }
00002c  bd10              POP      {r4,pc}
;;;74     
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      0x40070000

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;74     
;;;75     void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77         SYS_ResetModule(UART0_RST);
000002  481e              LDR      r0,|L5.124|
000004  f7fffffe          BL       SYS_ResetModule
;;;78     
;;;79         /* Configure UART0 and set UART0 baud rate */
;;;80         UART_Open(UART0, 115200);
000008  4c1d              LDR      r4,|L5.128|
00000a  21e1              MOVS     r1,#0xe1
00000c  0249              LSLS     r1,r1,#9
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_Open
;;;81     
;;;82     	/* Set UART receive time-out */
;;;83     	UART_SetTimeoutCnt(UART0, 20);
000014  2114              MOVS     r1,#0x14
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       UART_SetTimeoutCnt
;;;84     
;;;85     	UART0->FIFO &= ~UART_FIFO_RFITL_4BYTES;
00001c  68a0              LDR      r0,[r4,#8]
00001e  2110              MOVS     r1,#0x10
000020  4388              BICS     r0,r0,r1
000022  60a0              STR      r0,[r4,#8]
;;;86     	UART0->FIFO |= UART_FIFO_RFITL_8BYTES;
000024  68a0              LDR      r0,[r4,#8]
000026  2120              MOVS     r1,#0x20
000028  4308              ORRS     r0,r0,r1
00002a  60a0              STR      r0,[r4,#8]
;;;87     
;;;88     	/* Enable UART Interrupt - */
;;;89     	UART_ENABLE_INT(UART0, UART_INTEN_RDAIEN_Msk | UART_INTEN_TOCNTEN_Msk | UART_INTEN_RXTOIEN_Msk);
00002c  6860              LDR      r0,[r4,#4]
00002e  4915              LDR      r1,|L5.132|
000030  4308              ORRS     r0,r0,r1
000032  6060              STR      r0,[r4,#4]
000034  2001              MOVS     r0,#1
000036  4914              LDR      r1,|L5.136|
000038  0300              LSLS     r0,r0,#12
00003a  6008              STR      r0,[r1,#0]
;;;90     	
;;;91     	NVIC_EnableIRQ(UART02_IRQn);
;;;92     
;;;93     	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
00003c  f7fffffe          BL       CLK_GetCPUFreq
000040  4601              MOV      r1,r0
000042  a012              ADR      r0,|L5.140|
000044  f7fffffe          BL       __2printf
;;;94     	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000048  f7fffffe          BL       CLK_GetHXTFreq
00004c  4601              MOV      r1,r0
00004e  a016              ADR      r0,|L5.168|
000050  f7fffffe          BL       __2printf
;;;95     	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
000054  f7fffffe          BL       CLK_GetLXTFreq
000058  4601              MOV      r1,r0
00005a  a019              ADR      r0,|L5.192|
00005c  f7fffffe          BL       __2printf
;;;96     	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000060  f7fffffe          BL       CLK_GetPCLK0Freq
000064  4601              MOV      r1,r0
000066  a01c              ADR      r0,|L5.216|
000068  f7fffffe          BL       __2printf
;;;97     	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());	
00006c  f7fffffe          BL       CLK_GetPCLK1Freq
000070  4601              MOV      r1,r0
000072  a020              ADR      r0,|L5.244|
000074  f7fffffe          BL       __2printf
;;;98     }
000078  bd10              POP      {r4,pc}
;;;99     
                          ENDP

00007a  0000              DCW      0x0000
                  |L5.124|
                          DCD      0x04000010
                  |L5.128|
                          DCD      0x40070000
                  |L5.132|
                          DCD      0x00000811
                  |L5.136|
                          DCD      0xe000e100
                  |L5.140|
00008c  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
000090  4b5f4765
000094  74435055
000098  46726571
00009c  203a2025
0000a0  38640d0a
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L5.168|
0000a8  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
0000ac  47657448
0000b0  58544672
0000b4  6571203a
0000b8  20253864
0000bc  0d0a00  
0000bf  00                DCB      0
                  |L5.192|
0000c0  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0000c4  4765744c
0000c8  58544672
0000cc  6571203a
0000d0  20253864
0000d4  0d0a00  
0000d7  00                DCB      0
                  |L5.216|
0000d8  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000dc  47657450
0000e0  434c4b30
0000e4  46726571
0000e8  203a2025
0000ec  38640d0a
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L5.244|
0000f4  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000f8  47657450
0000fc  434c4b31
000100  46726571
000104  203a2025
000108  38640d0a
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0

                          AREA ||i.UARTx_Process||, CODE, READONLY, ALIGN=2

                  UARTx_Process PROC
;;;32     
;;;33     void UARTx_Process(void)
000000  b510              PUSH     {r4,lr}
;;;34     {
;;;35     	uint8_t res = 0;
;;;36     	
;;;37     	res = UART_READ(UART0);
000002  480b              LDR      r0,|L6.48|
000004  6800              LDR      r0,[r0,#0]
000006  b2c0              UXTB     r0,r0
;;;38     
;;;39     	if (res == 'x' || res == 'X')
000008  2878              CMP      r0,#0x78
00000a  d007              BEQ      |L6.28|
00000c  2858              CMP      r0,#0x58
00000e  d005              BEQ      |L6.28|
;;;40     	{
;;;41     		NVIC_SystemReset();
;;;42     	}
;;;43     
;;;44     	if (res > 0x7F)
000010  287f              CMP      r0,#0x7f
000012  d902              BLS      |L6.26|
;;;45     	{
;;;46     		printf("invalid command\r\n");
000014  a007              ADR      r0,|L6.52|
000016  f7fffffe          BL       __2printf
                  |L6.26|
;;;47     	}
;;;48     	else
;;;49     	{
;;;50     		switch(res)
;;;51     		{
;;;52     			case '1':
;;;53     
;;;54     				break;				
;;;55     		}
;;;56     	}
;;;57     }
00001a  bd10              POP      {r4,pc}
                  |L6.28|
00001c  f3bf8f4f          DSB      
000020  490a              LDR      r1,|L6.76|
000022  4809              LDR      r0,|L6.72|
000024  60c8              STR      r0,[r1,#0xc]
000026  f3bf8f4f          DSB      
                  |L6.42|
00002a  bf00              NOP      
00002c  e7fd              B        |L6.42|
;;;58     
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      0x40070000
                  |L6.52|
000034  696e7661          DCB      "invalid command\r\n",0
000038  6c696420
00003c  636f6d6d
000040  616e640d
000044  0a00    
000046  00                DCB      0
000047  00                DCB      0
                  |L6.72|
                          DCD      0x05fa0004
                  |L6.76|
                          DCD      0xe000ed00

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;169    
;;;170    int main()
000000  f7fffffe          BL       SYS_Init
;;;171    {
;;;172        SYS_Init();
;;;173    
;;;174        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;175    	
;;;176    	TIMER1_Init();
000008  f7fffffe          BL       TIMER1_Init
;;;177    	
;;;178        GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
00000c  2201              MOVS     r2,#1
00000e  0391              LSLS     r1,r2,#14
000010  4801              LDR      r0,|L7.24|
000012  f7fffffe          BL       GPIO_SetMode
                  |L7.22|
;;;179    	
;;;180        /* Got no where to go, just loop forever */
;;;181        while(1)
000016  e7fe              B        |L7.22|
;;;182        {
;;;183    		
;;;184        }
;;;185    }
;;;186    
                          ENDP

                  |L7.24|
                          DCD      0x40004040

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  544d5231          DCB      0x54,0x4d,0x52,0x31
000004  5f495251          DCB      0x5f,0x49,0x52,0x51
000008  48616e64          DCB      0x48,0x61,0x6e,0x64
00000c  6c657200          DCB      0x6c,0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  BitFlag
000000  00                DCB      0x00

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  ||CNT||
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  LOG
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_BitFlag____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REVSH|
#line 402
|__asm___6_main_c_BitFlag____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
